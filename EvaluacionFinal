# include "data.h"
int fil;
int col;
int count = 0;
long int menorValorx = 0;
long int menorValory = 0;
long int menorValorz = 0;
float valorPromedio = 0;
float trainDataKnnDistancia[157][2];
float valorDistancia;
float trainDataKnnNormDist[157][3];
float trainDataKnn[52][4];
// #############################################################################################
float test [8][4] = {
  //  {16516, -4256, -2764, 4},
  //  {16516, -2528, -3728, 4},
  //  {8112, -13036, 7412, 3},
  //  {6420, -10776, 6736, 3},
  //  {7972, 16060, 2376, 2},
  //  {7972, 14792, 2376, 2},
  //  {3152, -1472, 17120, 1},
  //  {148, 140, 15536, 1},
  {16516, 8780, 964, 4},
  {16516, 10128, 0, 4},
  {8112, 0, 11140, 3},
  {6420, 2260, 10464, 3},
  {7972, 29096, 6104, 2},
  {7972, 27828, 6104, 2},
  {3152, 11564, 20848, 1},
  {148, 13176, 19264, 1},
};
int testSize = 8;
float rendTotal;
float test2[4];
int j;
int filKnn = 0;
int colKnn = 0;
float distancia = 0;
const int k = 1;
float kvector[k];
int i;
int etiquetak[k];
float distanciak[52];
float distanciak2[52];
int countKnn = 0;
// ###################################################################################################

void setup() {
  Serial.begin(9600);
  //  printtrainDataKnn();
  for (fil = 0; fil < 157; fil++) {
    for (col = 0; col < 4; col++) {
      if (trainData[fil][0] < menorValorx)
        menorValorx = trainData[fil][0];
      if (trainData[fil][1] < menorValory)
        menorValory = trainData[fil][1];
      if (trainData[fil][2] < menorValorz)
        menorValorz = trainData[fil][2];
    }
  }
  Serial.println(String(menorValorx) + "   " + String(menorValory) + "   " + String(menorValorz));
  Serial.println("###############################################################################");
  restarMayorNegativo();
  distanciaData(promedio(0, 1), promedio(1, 1), promedio(2, 1), 1);
  distanciaData(promedio(0, 2), promedio(1, 2), promedio(2, 2), 2);
  distanciaData(promedio(0, 3), promedio(1, 3), promedio(2, 3), 3);
  distanciaData(promedio(0, 4), promedio(1, 4), promedio(2, 4), 4);

  //  for (fil = 0; fil < 157; fil++) {
  //    for (col = 0; col < 2; col++) {
  //      Serial.print(trainDataKnnDistancia[fil][col]);
  //      Serial.print("   ");
  //    }
  //    Serial.println("   ");
  //  }

  normDist(distanciaMayor(1), 1);
  normDist(distanciaMayor(2), 2);
  normDist(distanciaMayor(3), 3);
  normDist(distanciaMayor(4), 4);

  //  printtrainDataKnnNormDist();
  rango();
  printtrainDataKnnNormDist();
  centroide(48, 1);
  centroide(49, 2);
  centroide(50, 3);
  centroide(51, 4);

  for (fil = 0; fil < 52; fil++) {
    for (col = 0; col < 4; col++) {
      Serial.print(trainDataKnn[fil][col]);
      Serial.print("   ");
    }
    Serial.println("   ");
  }
}

void loop() {
  if (countKnn < 8) {
    dataKNN(countKnn);
    printArray(test2, 4, "Data: ");
    for (filKnn = 0; filKnn < 52; filKnn ++) {
      for (colKnn = 0; colKnn < 3; colKnn++) {
        // Distance
        distancia = distancia + pow(trainDataKnn[filKnn][colKnn] - test2[colKnn], 2);
      }
      distancia = sqrt(distancia);
      distanciak[filKnn] = distancia;
      distanciak2[filKnn] = distancia;
      //      Serial.println(String(filKnn) + ":" + String(distancia));
    }
    ordenar(distanciak, 52);
    //    printArray(distanciak, 52);
    for (int m = 0; m < k; m++) {
      kvector[m] = distanciak[m];
      float dato = kvector[m];
      for (filKnn = 0; filKnn < 52; filKnn++) {
        if (dato == distanciak2[filKnn]) {
          Serial.println("  Match Found: " + String(dato));
          Serial.println("    Valor trainDataKnn: " + String(trainDataKnn[filKnn][3]));
          etiquetak[m] = trainDataKnn[filKnn][3];
        }
      }
    }
    Serial.println("Los " + String(k) + " vecinos mas cercanos son:");;
    printArray(kvector, k, "Neighboors: ");
    //    Serial.println("Etiquetas Vecinos");
    //    printArray(etiquetak, k);

    int y = test2[3];
    if ( y == etiquetak[0] ) {
      Serial.println("Acierto, Valor Obtenido: " + String(etiquetak[0]) + "; Valor Esperado: " + String(y));
    } else {
      Serial.println("Error, Valor Obtenido: " + String(etiquetak[0]) + "; Valor Esperado :" + String(y));
    }
    rendTotal = rendTotal + rendimiento();
    delay(3000);
    countKnn++;
  }
  if (countKnn == 8) {
    Serial.println();
    Serial.println( "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ " );
    Serial.println( "Rendimiento Total: " + String((rendTotal / testSize) * 100) + "%." );
    Serial.println( "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ " );
    countKnn++;
  }
}

void restarMayorNegativo() {
  for (fil = 0; fil < 157; fil++) {
    trainData[fil][0] = trainData[fil][0] - menorValorx;
    trainData[fil][1] = trainData[fil][1] - menorValory;
    trainData[fil][2] = trainData[fil][2] - menorValorz;
  }
}

void printtrainDataKnn() {
  for (fil = 0; fil < 157; fil++) {
    for (col = 0; col < 4; col++) {

      Serial.print(trainData[fil][col]);
      Serial.print("   ");
    }
    Serial.println("   ");
  }
}

float promedio(int x, int y) {
  int count = 0;
  float suma = 0;
  for (fil = 0; fil < 157; fil++) {
    if (trainData[fil][3] == y) {
      suma = suma + trainData[fil][x];
      count++;
    }
  }
  valorPromedio = suma / count;
  Serial.println("El promedio de los valores de la columna " + String(x) + ", con la etiqueta " + String(y) + " es: " + String(valorPromedio));
  return valorPromedio;
}

void distanciaData(float promediox, float promedioy, float promedioz, int y) {
  for (fil = 0; fil < 157; fil++) {
    if (trainData[fil][3] == y) {
      for (col = 0; col < 3; col++) {
        valorDistancia = sqrt(pow(trainData[fil][0] - promediox, 2) + pow(trainData[fil][1] - promedioy, 2) + pow(trainData[fil][2] - promedioz, 2));
      }
      trainDataKnnDistancia[count][0] = valorDistancia;
      trainDataKnnDistancia[count][1] = y;
      count++;
    }
  }
}

void printVector(float *a) {
  for ( col = 0; col < 157; col++) {
    Serial.println(a[col]);
  }
}

float distanciaMayor(int y) {
  float valorDistanciaMayor = 0;
  for (fil = 0; fil < 157; fil++) {
    if (trainDataKnnDistancia[fil][1] == y) {
      if (trainDataKnnDistancia[fil][0] > valorDistanciaMayor) {
        valorDistanciaMayor = trainDataKnnDistancia[fil][0];
      }
    }
  }
  Serial.println("Distancia mayor etiqueta " + String(y) + ":" + String(valorDistanciaMayor));
  return valorDistanciaMayor;
}

void normDist(float x, int y) {
  for (fil = 0; fil < 157; fil++) {
    if ( trainDataKnnDistancia[fil][1] == y) {
      trainDataKnnNormDist[fil][0] = trainDataKnnDistancia[fil][0] / x;
      trainDataKnnNormDist[fil][1] = trainDataKnnDistancia[fil][1];
    }
  }
}

void printtrainDataKnnNormDist() {
  for (fil = 0; fil < 157; fil++) {
    for (col = 0; col < 3; col++) {
      Serial.print(trainDataKnnNormDist[fil][col]);
      Serial.print(" ");
    }
    Serial.println("");
  }
}

void rango() {
  int countFil = 0;
  Serial.println("########################## RANGO ################################");
  for (fil = 0; fil < 157; fil++) {
    if ( trainDataKnnNormDist[fil][0] > 0.40 && trainDataKnnNormDist[fil][0] < 0.65) {
      trainDataKnnNormDist[fil][2] = 1;
      trainDataKnn[countFil][0] = trainData[fil][0];
      trainDataKnn[countFil][1] = trainData[fil][1];
      trainDataKnn[countFil][2] = trainData[fil][2];
      trainDataKnn[countFil][3] = trainData[fil][3];
      countFil++;
    }
    else
      trainDataKnnNormDist[fil][2] = 0;
  }
}

void centroide (int fil, int j ) {
  for (col = 0; col < 3; col++) {
    trainDataKnn[fil][col] = promedio(col, j);
  }
  trainDataKnn[fil][3] = j;
}

void dataKNN(int x) {
  for (i = 0; i < 4; i++) {
    test2[i] = test[x][i];
  }
}

void ordenar(float *a, int n) {
  for (int i = 1; i < n; ++i) {
    float j = a[i];
    int h;
    for (h = i - 1; (h >= 0) && (j < a[h]); h--) {
      a[h + 1] = a[h];
    }
    a[h + 1] = j;
  }
}

void printArray(float *a, int n, String h) {
  Serial.print(h);
  for (int i = 0; i < n; i++) {
    Serial.print(a[i]);
    Serial.print(' ');
  }
  Serial.println();
}

float rendimiento() {
  float valor = 0;
  for ( i = 0; i < k; i++ ) {
    if (test2[3] == etiquetak[i]) {
      valor++;
    }
  }
  valor = ( valor / k ) * 100;
  Serial.println( "#####################################" );
  Serial.println( "Rendimiento: " + String(valor) + "%." );
  Serial.println( "#####################################" );
  Serial.println("");
  Serial.println("");

  return valor / 100;
}
